name: Elice DevOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: localhost:5000
  PYTHON_VERSION: '3.11'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            services:
              - 'aws/microservices/**'
            infrastructure:
              - 'aws/terraform/**'
              - 'aws/kubernetes/**'

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-test:
    needs: [detect-changes, security-scan]
    if: needs.detect-changes.outputs.services == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, user-service]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"
      
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: aws/microservices/${{ matrix.service }}
        run: |
          uv venv
          uv pip install -e .[dev]
      
      - name: Run linting
        working-directory: aws/microservices/${{ matrix.service }}
        run: |
          source .venv/bin/activate
          ruff check . --output-format=github
          ruff format --check .
      
      - name: Run type checking
        working-directory: aws/microservices/${{ matrix.service }}
        run: |
          source .venv/bin/activate
          mypy . --install-types --non-interactive
      
      - name: Run tests
        working-directory: aws/microservices/${{ matrix.service }}
        run: |
          source .venv/bin/activate
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: aws/microservices/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}

  trigger-jenkins:
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Jenkins Pipeline
        run: |
          curl -X POST \
            -u admin:${{ secrets.JENKINS_API_TOKEN }} \
            -H "Jenkins-Crumb: $(curl -s -u admin:${{ secrets.JENKINS_API_TOKEN }} \
              'http://localhost:8080/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)')" \
            "http://localhost:8080/job/elice-microservices/job/main/build"

  create-release:
    needs: [trigger-jenkins]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Deployment
            - Environment: Production
            - Build: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
          draft: false
          prerelease: false