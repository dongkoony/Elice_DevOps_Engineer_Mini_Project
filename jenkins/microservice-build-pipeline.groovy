pipeline {
    agent any
    
    parameters {
        choice(
            name: 'SERVICE_NAME',
            choices: [
                'api-gateway',
                'auth-service', 
                'user-service',
                'product-service',
                'order-service',
                'payment-service',
                'inventory-service',
                'review-service',
                'notification-service',
                'analytics-service',
                'log-service',
                'health-service'
            ],
            description: 'ÎπåÎìúÌï† ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ ÏÑ†ÌÉù'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'stg', 'prod'],
            description: 'Î∞∞Ìè¨ ÌôòÍ≤Ω ÏÑ†ÌÉù'
        )
        string(
            name: 'IMAGE_TAG',
            defaultValue: 'latest',
            description: 'Docker Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ (Í∏∞Î≥∏Í∞í: latest)'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'ÌÖåÏä§Ìä∏ Í±¥ÎÑàÎõ∞Í∏∞'
        )
        booleanParam(
            name: 'DEPLOY_TO_K8S',
            defaultValue: false,
            description: 'KubernetesÏóê ÏûêÎèô Î∞∞Ìè¨'
        )
    }
    
    environment {
        // Docker Î†àÏßÄÏä§Ìä∏Î¶¨ ÏÑ§Ï†ï (Î°úÏª¨ Í∞úÎ∞úÏö©)
        DOCKER_REGISTRY = "${env.DOCKER_REGISTRY ?: 'localhost:5000'}"
        SERVICE_PATH = "aws/microservices/${params.SERVICE_NAME}"
        IMAGE_NAME = "${DOCKER_REGISTRY}/${params.SERVICE_NAME}"
        FULL_IMAGE_TAG = "${params.ENVIRONMENT}-${env.BUILD_NUMBER}-${env.GIT_COMMIT?.take(7) ?: 'unknown'}"
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timeout(time: 20, unit: 'MINUTES')
        disableConcurrentBuilds()
        skipStagesAfterUnstable()
    }
    
    stages {
        stage('üîç Ï§ÄÎπÑ Î∞è Í≤ÄÏ¶ù') {
            steps {
                echo "=== Elice DevOps ÎßàÏù¥ÌÅ¨Î°úÏÑúÎπÑÏä§ ÎπåÎìú ÌååÏù¥ÌîÑÎùºÏù∏ ==="
                echo "ÏÑúÎπÑÏä§: ${params.SERVICE_NAME}"
                echo "ÌôòÍ≤Ω: ${params.ENVIRONMENT}"
                echo "Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏: ${params.IMAGE_TAG}"
                echo "ÌíÄ Ïù¥ÎØ∏ÏßÄÎ™Ö: ${env.IMAGE_NAME}:${env.FULL_IMAGE_TAG}"
                
                // ÏÑúÎπÑÏä§ ÎîîÎ†âÌÜ†Î¶¨ Ï°¥Ïû¨ ÌôïÏù∏
                script {
                    if (!fileExists("${env.SERVICE_PATH}")) {
                        error("ÏÑúÎπÑÏä§ ÎîîÎ†âÌÜ†Î¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: ${env.SERVICE_PATH}")
                    }
                    
                    if (!fileExists("${env.SERVICE_PATH}/pyproject.toml")) {
                        error("pyproject.toml ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: ${env.SERVICE_PATH}/pyproject.toml")
                    }
                    
                    if (!fileExists("${env.SERVICE_PATH}/Dockerfile")) {
                        error("DockerfileÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: ${env.SERVICE_PATH}/Dockerfile")
                    }
                }
                
                echo "‚úÖ Î™®Îì† ÌïÑÏàò ÌååÏùºÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§"
            }
        }
        
        stage('üì¶ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò Î∞è Í≤ÄÏ¶ù') {
            steps {
                dir("${env.SERVICE_PATH}") {
                    sh '''
                        echo "=== uvÎ•º Ïù¥Ïö©Ìïú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò ==="
                        
                        # uv Í∞ÄÏÉÅÌôòÍ≤Ω ÏÉùÏÑ±
                        uv venv --python 3.11
                        
                        # ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò (lockfile Ïö∞ÏÑ†)
                        if [ -f "requirements.lock" ]; then
                            echo "requirements.lock ÌååÏùºÎ°ú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò"
                            uv pip install -r requirements.lock
                        else
                            echo "pyproject.tomlÎ°ú ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò"
                            uv pip install .
                        fi
                        
                        # ÏÑ§ÏπòÎêú Ìå®ÌÇ§ÏßÄ ÌôïÏù∏
                        echo "ÏÑ§ÏπòÎêú Ìå®ÌÇ§ÏßÄ Î™©Î°ù:"
                        uv pip list | head -20
                    '''
                }
            }
        }
        
        stage('üß™ ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨') {
            when {
                not { params.SKIP_TESTS }
            }
            parallel {
                stage('Î¶∞ÌåÖ') {
                    steps {
                        dir("${env.SERVICE_PATH}") {
                            sh '''
                                echo "=== ÏΩîÎìú Î¶∞ÌåÖ Í≤ÄÏÇ¨ ==="
                                source .venv/bin/activate
                                
                                # ruffÍ∞Ä ÏûàÎã§Î©¥ ÏÇ¨Ïö©, ÏóÜÎã§Î©¥ Í∏∞Î≥∏ Í≤ÄÏÇ¨
                                if uv pip show ruff >/dev/null 2>&1; then
                                    echo "RuffÎ°ú Î¶∞ÌåÖ Í≤ÄÏÇ¨"
                                    uv run ruff check . || echo "Î¶∞ÌåÖ Í≤ΩÍ≥† Î∞úÍ≤¨"
                                else
                                    echo "Í∏∞Î≥∏ Python Î¨∏Î≤ï Í≤ÄÏÇ¨"
                                    python -m py_compile **/*.py 2>/dev/null || echo "Python ÌååÏùº Ïª¥ÌååÏùº Í≤ÄÏÇ¨ ÏôÑÎ£å"
                                fi
                            '''
                        }
                    }
                }
                
                stage('ÌÉÄÏûÖ Í≤ÄÏÇ¨') {
                    steps {
                        dir("${env.SERVICE_PATH}") {
                            sh '''
                                echo "=== ÌÉÄÏûÖ Í≤ÄÏÇ¨ ==="
                                source .venv/bin/activate
                                
                                # mypyÍ∞Ä ÏûàÎã§Î©¥ ÏÇ¨Ïö©
                                if uv pip show mypy >/dev/null 2>&1; then
                                    echo "mypyÎ°ú ÌÉÄÏûÖ Í≤ÄÏÇ¨"
                                    uv run mypy . || echo "ÌÉÄÏûÖ Í≤ÄÏÇ¨ Í≤ΩÍ≥† Î∞úÍ≤¨"
                                else
                                    echo "mypyÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùå - Í±¥ÎÑàÎõ∞Í∏∞"
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('üèóÔ∏è Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú') {
            steps {
                dir("${env.SERVICE_PATH}") {
                    sh """
                        echo "=== Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ==="
                        
                        # ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨ÏôÄ Dockerfile ÌôïÏù∏
                        echo "ÌòÑÏû¨ ÏúÑÏπò: \$(pwd)"
                        echo "Dockerfile ÎÇ¥Ïö© (Ï≤´ 10Ï§Ñ):"
                        head -10 Dockerfile
                        
                        # Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
                        docker build \\
                            --tag ${env.IMAGE_NAME}:${env.FULL_IMAGE_TAG} \\
                            --tag ${env.IMAGE_NAME}:latest \\
                            --label "service=${params.SERVICE_NAME}" \\
                            --label "environment=${params.ENVIRONMENT}" \\
                            --label "build-number=${env.BUILD_NUMBER}" \\
                            --label "git-commit=\${GIT_COMMIT:-unknown}" \\
                            .
                        
                        echo "‚úÖ Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú ÏôÑÎ£å"
                        docker images | grep ${params.SERVICE_NAME} | head -5
                    """
                }
            }
        }
        
        stage('üîê Î≥¥Ïïà Í≤ÄÏÇ¨') {
            when {
                not { params.SKIP_TESTS }
            }
            steps {
                sh """
                    echo "=== Docker Ïù¥ÎØ∏ÏßÄ Î≥¥Ïïà Í≤ÄÏÇ¨ ==="
                    
                    # TrivyÍ∞Ä ÏûàÎã§Î©¥ Î≥¥Ïïà Ïä§Ï∫î (ÏÑ†ÌÉùÏ†Å)
                    if command -v trivy >/dev/null 2>&1; then
                        echo "TrivyÎ°ú Î≥¥Ïïà Ïä§Ï∫î Ïã§Ìñâ"
                        trivy image --exit-code 0 --severity HIGH,CRITICAL ${env.IMAGE_NAME}:${env.FULL_IMAGE_TAG}
                    else
                        echo "Trivy ÎØ∏ÏÑ§Ïπò - Í∏∞Î≥∏ Î≥¥Ïïà Í≤ÄÏÇ¨ Ïã§Ìñâ"
                        docker run --rm ${env.IMAGE_NAME}:${env.FULL_IMAGE_TAG} python --version
                    fi
                """
            }
        }
        
        stage('üì§ Ïù¥ÎØ∏ÏßÄ Ìë∏Ïãú') {
            when {
                anyOf {
                    equals expected: 'stg', actual: params.ENVIRONMENT
                    equals expected: 'prod', actual: params.ENVIRONMENT
                }
            }
            steps {
                sh """
                    echo "=== Docker Ïù¥ÎØ∏ÏßÄ Î†àÏßÄÏä§Ìä∏Î¶¨ Ìë∏Ïãú ==="
                    
                    # Î°úÏª¨ Î†àÏßÄÏä§Ìä∏Î¶¨Ïóê Ìë∏Ïãú (Í∞úÎ∞úÌôòÍ≤Ω)
                    if [[ "${env.DOCKER_REGISTRY}" == "localhost:5000" ]]; then
                        echo "Î°úÏª¨ Î†àÏßÄÏä§Ìä∏Î¶¨Ïóê Ìë∏Ïãú"
                        docker push ${env.IMAGE_NAME}:${env.FULL_IMAGE_TAG}
                        docker push ${env.IMAGE_NAME}:latest
                    else
                        echo "Ïô∏Î∂Ä Î†àÏßÄÏä§Ìä∏Î¶¨ Ìë∏ÏãúÎäî Ï∂îÌõÑ Íµ¨ÌòÑ"
                    fi
                """
            }
        }
        
        stage('üöÄ Kubernetes Î∞∞Ìè¨') {
            when {
                equals expected: true, actual: params.DEPLOY_TO_K8S
            }
            steps {
                sh """
                    echo "=== Kubernetes Î∞∞Ìè¨ ==="
                    
                    # Kubernetes Îß§ÎãàÌéòÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ (Í∞úÎ∞úÌôòÍ≤Ω)
                    if kubectl get deployment ${params.SERVICE_NAME} -n elice-devops-${params.ENVIRONMENT} >/dev/null 2>&1; then
                        echo "Í∏∞Ï°¥ Î∞∞Ìè¨ ÏóÖÎç∞Ïù¥Ìä∏"
                        kubectl set image deployment/${params.SERVICE_NAME} \\
                            ${params.SERVICE_NAME}=${env.IMAGE_NAME}:${env.FULL_IMAGE_TAG} \\
                            -n elice-devops-${params.ENVIRONMENT}
                        
                        # Î°§ÏïÑÏõÉ ÏÉÅÌÉú ÌôïÏù∏
                        kubectl rollout status deployment/${params.SERVICE_NAME} -n elice-devops-${params.ENVIRONMENT}
                    else
                        echo "Ìï¥Îãπ ÌôòÍ≤ΩÏóê Î∞∞Ìè¨Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§"
                        echo "ÏàòÎèôÏúºÎ°ú Îß§ÎãàÌéòÏä§Ìä∏Î•º Ï†ÅÏö©ÌïòÏÑ∏Ïöî"
                    fi
                """
            }
        }
    }
    
    post {
        always {
            echo "ÌååÏù¥ÌîÑÎùºÏù∏ ÏôÑÎ£å - ÏÑúÎπÑÏä§: ${params.SERVICE_NAME}, ÌôòÍ≤Ω: ${params.ENVIRONMENT}"
            echo "Ïã§Ìñâ ÏãúÍ∞Ñ: ${currentBuild.durationString}"
            
            // ÎπåÎìú ÏïÑÌã∞Ìå©Ìä∏ Ï†ïÎ¶¨ (ÏÑ†ÌÉùÏ†Å)
            sh '''
                echo "ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨"
                docker system prune -f --filter "label=build-number=${BUILD_NUMBER}" || true
            '''
        }
        
        success {
            echo "üéâ ${params.SERVICE_NAME} ÎπåÎìú Î∞è Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!"
            
            // Slack ÏïåÎ¶º (ÏÑ†ÌÉùÏ†Å - ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêú Í≤ΩÏö∞)
            script {
                if (env.SLACK_WEBHOOK_URL) {
                    // slackSend ÌîåÎü¨Í∑∏Ïù∏ ÏÇ¨Ïö©
                    echo "Slack ÏïåÎ¶º Ï†ÑÏÜ° Ï§ÄÎπÑ ÏôÑÎ£å"
                }
            }
        }
        
        failure {
            echo "‚ùå ${params.SERVICE_NAME} ÎπåÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§."
            echo "Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÏÑ∏Ïöî."
        }
        
        unstable {
            echo "‚ö†Ô∏è ${params.SERVICE_NAME} ÎπåÎìúÍ∞Ä Î∂àÏïàÏ†ïÌïú ÏÉÅÌÉúÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§."
        }
    }
}